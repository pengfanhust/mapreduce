/**
 */

package preprocess;

import java.io.IOException;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.Mapper.Context;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.util.GenericOptionsParser;

public class PreprocessGraphWithCombiner {

	public static class PreprocessGraphWithCombinerMapper extends
			Mapper<Object, Text, IntWritable, Text> {

		private IntWritable id = new IntWritable();
		private Text text = new Text();
		private HashMap<IntWritable, StringBuilder> buf = new HashMap<IntWritable, StringBuilder>();

		public void map(Object key, Text value, Context context)
				throws IOException, InterruptedException {
			String[] lines = value.toString().split(",");
			id.set(Integer.parseInt(lines[1]));
			IntWritable followerID = new IntWritable(Integer.parseInt(lines[0]));
			StringBuilder sb = buf.get(followerID);
			if (sb == null) {
				sb = new StringBuilder();
				buf.put(followerID, sb);
			}
			sb.append(id.toString()).append(";");
		}

		public void cleanup(Context context) throws IOException,
				InterruptedException {
			for (Map.Entry<IntWritable, StringBuilder> e : buf.entrySet()) {
				StringBuilder sb = e.getValue();
				int end = sb.length();
				text.set(sb.deleteCharAt(end - 1).toString());
				context.write(e.getKey(), text);
			}
		}
	}

	public static class PreprocessGraphWithCombinerReducer extends
			Reducer<IntWritable, Text, IntWritable, Text> {
		private Text ajacentList = new Text();

		public void reduce(IntWritable key, Iterable<Text> values,
				Context context) throws IOException, InterruptedException {
			StringBuilder ajacentListstr = new StringBuilder();
			for (Text val : values) {
				ajacentListstr.append(val.toString());
			}
			int end = ajacentListstr.length();
			ajacentList.set(ajacentListstr.deleteCharAt(end - 1).toString());
			context.write(key, ajacentList);
		}
	}

	public static void main(String[] args) throws Exception {
		Date start = new Date();
		Configuration conf = new Configuration();
		String[] otherArgs = new GenericOptionsParser(conf, args)
				.getRemainingArgs();
		if (otherArgs.length != 2) {
			System.err.println("Usage: PreprocessGraphWithCombiner <in> <out>");
			System.exit(2);
		}
		Job job = new Job(conf, "PreprocessGraphWithCombiner");
		job.setJarByClass(PreprocessGraph.class);
		job.setMapperClass(PreprocessGraphWithCombinerMapper.class);
		job.setReducerClass(PreprocessGraphWithCombinerReducer.class);
		job.setMapOutputKeyClass(IntWritable.class);
		job.setMapOutputValueClass(Text.class);
		job.setOutputKeyClass(IntWritable.class);
		job.setOutputValueClass(Text.class);
		FileInputFormat.addInputPath(job, new Path(otherArgs[0]));
		FileOutputFormat.setOutputPath(job, new Path(otherArgs[1]));
		job.waitForCompletion(true);
		System.out.println(start);
		System.out.println(new Date());
	}
}
