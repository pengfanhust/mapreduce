package sssp;

import java.io.IOException;
import java.util.Date;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.util.GenericOptionsParser;

import util.MpRdcFinalConstants;

public class SingleSourceShortestPath {

	public static class SingleSourceShortestPathMapper extends
			Mapper<Object, Text, IntWritable, Text> {
		private IntWritable id = new IntWritable();
		private Text text = new Text();

		public void map(Object key, Text value, Context context)
				throws IOException, InterruptedException {
			String[] line = value.toString().split(
					MpRdcFinalConstants.FIELD_SEPRATOR);
			id.set(Integer.parseInt(line[0]));
			if (line.length == 1) {
				// src node file
				text.set("0");
				context.write(id, text);
			} else {
				Node n = new Node(line[1], Integer.parseInt(line[2]));
				// emit the node
				text.set(n.toString());
				context.write(id, text);
				int distance = n.distance();
				// emit distance for each node
				for (Integer adjacentNodeID : n.adjacentList()) {
					id.set(adjacentNodeID.intValue());
					if (distance == Integer.MAX_VALUE) {
						text.set(String.valueOf(distance));
						context.write(id, text);
					} else {
						text.set(String.valueOf(distance + 1));
						context.write(id, text);
					}
				}
			}
		}
	}

	public static class SingleSourceShortestPathReducer extends
			Reducer<IntWritable, Text, IntWritable, Text> {

		private Text text = new Text();
		public void reduce(IntWritable key, Iterable<Text> values,
				Context context) throws IOException, InterruptedException {
			Node n = null;
			int min = Integer.MAX_VALUE;
			int current;
			for (Text val : values) {
				String[] content = val.toString().split(MpRdcFinalConstants.FIELD_SEPRATOR);
				if (isNode(content)) {
					n = new Node(content[0], Integer.parseInt(content[1]));
				}
				else
				{
					current = Integer.parseInt(content[0]);
					if (current < min)
					{
						min = current;
					}
				}
			}
			if (min < n.distance())
			{
				n.setDistance(min);
			}
			text.set(n.toString());
			context.write(key,  text);
		}
		private boolean isNode(String[] content) {
			return content.length > 1;
		}
	}
	
	public static void main(String[] args) throws Exception {
		Date start = new Date();
		Configuration conf = new Configuration();
		String[] otherArgs = new GenericOptionsParser(conf, args)
				.getRemainingArgs();
		if (otherArgs.length != 2) {
			System.err.println("Usage: SingleSourceShortestPath <in> <out>");
			System.exit(2);
		}
		Job job = new Job(conf, "SingleSourceShortestPath");
		job.setJarByClass(SingleSourceShortestPath.class);
		job.setMapperClass(SingleSourceShortestPathMapper.class);
		job.setReducerClass(SingleSourceShortestPathReducer.class);
		job.setMapOutputKeyClass(IntWritable.class);
		job.setMapOutputValueClass(Text.class);
		job.setOutputKeyClass(IntWritable.class);
		job.setOutputValueClass(Text.class);
		FileInputFormat.addInputPath(job, new Path(otherArgs[0]));
		FileOutputFormat.setOutputPath(job, new Path(otherArgs[1]));
		job.waitForCompletion(true);
		System.out.println(start);
		System.out.println(new Date());
	}
}
