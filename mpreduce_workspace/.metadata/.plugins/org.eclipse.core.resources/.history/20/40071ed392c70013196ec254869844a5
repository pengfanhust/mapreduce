package ssspcolor;

import java.util.LinkedList;
import java.util.List;

import util.MpRdcConstants;

public class NodeColor {
	private int distance;
	private List<Integer> adjacentList = new LinkedList<Integer>();
	private int color;

	public NodeColor() {
		this.distance = MpRdcConstants.INFINITY;
		this.color = MpRdcConstants.WHITE;
	}

	public NodeColor(int distance) {
		this.distance = distance;
		this.color = MpRdcConstants.WHITE;
	}

	public NodeColor(String adjacentList, int distance, int color) {
		if (!adjacentList.equals("")) {
			String[] adjacentListStr = adjacentList
					.split(MpRdcConstants.ATTR_SEPRATOR);
			for (String id : adjacentListStr) {
				this.adjacentList.add(Integer.parseInt(id));
			}
		}
		this.distance = distance;
		this.color = color;
	}

	public List<Integer> adjacentList() {
		return adjacentList;
	}

	public int distance() {
		return distance;
	}

	public void setDistance(int distance) {
		this.distance = distance;
	}

	public void setColor(int color) {
		this.color = color;
	}

	public int getColor() {
		return color;
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		for (Integer id : adjacentList) {
			sb.append(id.toString()).append(MpRdcConstants.ATTR_SEPRATOR);
		}
		if (sb.length() > 1) {
			sb.deleteCharAt(sb.length() - 1);
		}
		sb.append(MpRdcConstants.FIELD_SEPRATOR).append(distance)
				.append(MpRdcConstants.FIELD_SEPRATOR).append(color);

		return sb.toString();
	}
}
