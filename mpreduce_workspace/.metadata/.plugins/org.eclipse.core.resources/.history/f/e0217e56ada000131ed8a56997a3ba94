package hw4.hpopulate;

import hw4.hpopulate.HPopulate.HPopulateMapper;

import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.hbase.HBaseConfiguration;
import org.apache.hadoop.hbase.HColumnDescriptor;
import org.apache.hadoop.hbase.HTableDescriptor;
import org.apache.hadoop.hbase.client.HBaseAdmin;
import org.apache.hadoop.hbase.client.HTable;
import org.apache.hadoop.hbase.client.Put;
import org.apache.hadoop.hbase.util.Bytes;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.NullOutputFormat;
import org.apache.hadoop.util.GenericOptionsParser;

import au.com.bytecode.opencsv.CSVParser;

public class Test {

	private static final int INDEX_YEAR = 0;
	private static final int INDEX_MONTH = 2;
	private static final int INDEX_AIR_LINE = 6;
	private static final int INDEX_ARR_DEALY_MIN = 37;
	private static final int INDEX_CANCELLED = 41;
	private static final int INDEX_DIVERTED = 43;
	private static final String TBL_NAME = "flight";
	private static final byte[] COL_FNAME = Bytes.toBytes("data");

	private static final byte[] COL_YEAR = Bytes.toBytes("y");
	private static final byte[] COL_MONTH = Bytes.toBytes("m");
	private static final byte[] COL_AIR_LINE = Bytes.toBytes("al");
	private static final byte[] COL_ARR_DELAY_MIN = Bytes.toBytes("dly");
	private static final byte[] COL_CANCELLED = Bytes.toBytes("c");
	private static final byte[] COL_DIVERTED = Bytes.toBytes("d");

	private static final CSVParser csvParser = new CSVParser();
	
	public static void main(String[] args) throws Exception {
		Date begin = new Date();
		Configuration confFilter = new Configuration();
		String[] otherArgs = new GenericOptionsParser(confFilter, args)
				.getRemainingArgs();

		if (otherArgs.length != 1) {
			System.err.println("Usage: flight delay avg <in>");
			System.exit(2);
		}

		// Create table
		Configuration config = HBaseConfiguration.create();
		HBaseAdmin admin = new HBaseAdmin(config);

		if (admin.tableExists(TBL_NAME)) {
			admin.disableTable(TBL_NAME);
			admin.deleteTable(TBL_NAME);
		}
		HTableDescriptor htd = new HTableDescriptor(TBL_NAME);
		htd.setDeferredLogFlush(true);
		HColumnDescriptor hcd = new HColumnDescriptor(COL_FNAME);
		htd.addFamily(hcd);
		admin.createTable(htd);

		config = HBaseConfiguration.create();
		HTable table = new HTable(config, TBL_NAME);
		table.setAutoFlush(false);
		table.setWriteBufferSize(1024 * 1024 * 500);
		List<Put> puts = new LinkedList<Put>();

		BufferedReader br = null;
		try {
			br = new BufferedReader(new FileReader(args[0]));
			String line = br.readLine();
			while (line != null)
			{

				String[] l = csvParser.parseLine(line.toString());
				String year = l[INDEX_YEAR];
				String month = l[INDEX_MONTH];
				String airLine = l[INDEX_AIR_LINE];
				String delayMin = l[INDEX_ARR_DEALY_MIN];
				String cancelled = l[INDEX_CANCELLED];
				String diverted = l[INDEX_DIVERTED];

				// put record
				byte[] row = Bytes.toBytes(airLine.concat(month).concat(
						key.toString()));
				// Put value value1 into column data:1
				Put p1 = new Put(row);
				p1.add(COL_FNAME, COL_YEAR, Bytes.toBytes(year));
				p1.add(COL_FNAME, COL_MONTH, Bytes.toBytes(month));
				p1.add(COL_FNAME, COL_AIR_LINE, Bytes.toBytes(airLine));
				p1.add(COL_FNAME, COL_ARR_DELAY_MIN, Bytes.toBytes(delayMin));
				p1.add(COL_FNAME, COL_CANCELLED, Bytes.toBytes(cancelled));
				p1.add(COL_FNAME, COL_DIVERTED, Bytes.toBytes(diverted));
//				p1.setDurability(Durability.SKIP_WAL);
				p1.setWriteToWAL(false);
				puts.add(p1);
			}
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (br != null) {
				try {
					br.close();
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}

		Date end = new Date();
		System.out.println(begin);
		System.out.println(end);
	}
}
