package hw4;

import java.io.IOException;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.FloatWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.util.GenericOptionsParser;

public class AverageDelay {

	public static class AverageDelayMapper extends
			Mapper<Object, Text, RecordKey, Record> {
		public void map(Object key, Text value, Context context)
				throws IOException, InterruptedException {
		}
	}

	public static class FlightDelayFilterReducer extends
			Reducer<RecordKey, Record, Text, Text> {
		public void reduce(RecordKey key, Iterable<Record> values,
				Context context) throws IOException, InterruptedException {
		}
	}
	
	public static void main(String []args) throws Exception {
		Configuration confFilter = new Configuration();
		String[] otherArgs = new GenericOptionsParser(confFilter, args)
				.getRemainingArgs();
		if (otherArgs.length != 2) {
			System.err.println("Usage: flight delay avg <in> <out>");
			System.exit(2);
		}
		
		// filter all the valid leg1-leg2 pair and calculate the 
		// delay time for each pair.
		Job jobFilter = new Job(confFilter, "flight delay filter");
		jobFilter.setJarByClass(AverageDelay.class);
		jobFilter.setMapperClass(AverageDelayMapper.class);
		jobFilter.setReducerClass(FlightDelayFilterReducer.class);

		jobFilter.setMapOutputKeyClass(RecordKey.class);
		jobFilter.setMapOutputValueClass(Record.class);

		jobFilter.setOutputKeyClass(Text.class);
		jobFilter.setOutputValueClass(Text.class);

		jobFilter.setGroupingComparatorClass(GroupingComparator.class);
		jobFilter.setNumReduceTasks(10);
		FileInputFormat.addInputPath(jobFilter, new Path(otherArgs[0]));
		FileOutputFormat.setOutputPath(jobFilter, new Path(otherArgs[1]));
		jobFilter.waitForCompletion(true);
	}
}
