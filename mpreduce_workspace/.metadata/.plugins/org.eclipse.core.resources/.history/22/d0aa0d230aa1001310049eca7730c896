package hw4.hpopulate;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import au.com.bytecode.opencsv.CSVParser;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.hbase.HBaseConfiguration;
import org.apache.hadoop.hbase.HColumnDescriptor;
import org.apache.hadoop.hbase.HTableDescriptor;
import org.apache.hadoop.hbase.client.HBaseAdmin;
import org.apache.hadoop.hbase.client.HTable;
import org.apache.hadoop.hbase.client.Put;
import org.apache.hadoop.hbase.util.Bytes;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapred.FileInputFormat;
import org.apache.hadoop.mapred.JobClient;
import org.apache.hadoop.mapred.JobConf;
import org.apache.hadoop.mapred.MapReduceBase;
import org.apache.hadoop.mapred.Mapper;
import org.apache.hadoop.mapred.OutputCollector;
import org.apache.hadoop.mapred.Reporter;
import org.apache.hadoop.mapred.lib.NullOutputFormat;
import org.apache.hadoop.util.Tool;
import org.apache.hadoop.util.ToolRunner;

public class HPopulate1 extends Configured implements Tool {

	// Constants
	private static String TABLENAME = "airline1";
	private static byte[] FAMILY = Bytes.toBytes("info");
	private static byte[] DELAY = Bytes.toBytes("delay");
	private static byte[] CANCELLED = Bytes.toBytes("cancelled");
	private static byte[] DIVERTED = Bytes.toBytes("diverted");

	private static int IYEAR = 0;
	private static int IMONTH = 2;
	private static int IAIRLINE = 6;
	private static int IDELAY = 37;
	private static int ICANCELLED = 41;
	private static int IDIVERTED = 43;

	// Mapper Class
	public static class HPopulateMapper<K, V> extends MapReduceBase implements
			Mapper<Object, Text, K, V> {

		private CSVParser parse = new CSVParser();
		private HTable table = null;
		private List<Put> list = null;

		@Override
		public void map(Object key, Text value, OutputCollector<K, V> output,
				Reporter reporter) throws IOException {

			String[] cols = parse.parseLine(value.toString());

			// add new row
			String rowkey = cols[IAIRLINE] + "-" + cols[IYEAR] + "-"
					+ cols[IMONTH] + "-" + key.toString();
			byte[] row = Bytes.toBytes(rowkey);
			Put p = new Put(row);

			// put value into column
			p.add(FAMILY, DELAY, Bytes.toBytes(cols[IDELAY]));
			p.add(FAMILY, CANCELLED, Bytes.toBytes(cols[ICANCELLED]));
			p.add(FAMILY, DIVERTED, Bytes.toBytes(cols[IDIVERTED]));

			list.add(p);
		}

		public void configure(JobConf jc) {
			super.configure(jc);
			try {
				// Establish the connection
				this.table = new HTable(HBaseConfiguration.create(jc),
						TABLENAME);
				list = new ArrayList<Put>();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

		public void close() throws IOException {
			super.close();
			// Put rows into the table
			table.put(list);
			table.close();
		}

	}

	@Override
	public int run(String[] args) throws Exception {
		if (args.length != 1) {
			System.err.println("Usage: HPopulate <in>");
			return -1;
		}

		// Configure the job and run
		JobConf jc = new JobConf(getConf(), getClass());
		FileInputFormat.addInputPath(jc, new Path(args[0]));
		jc.setMapperClass(HPopulateMapper.class);
		jc.setNumReduceTasks(0);
		jc.setOutputFormat(NullOutputFormat.class);
		JobClient.runJob(jc);

		return 0;
	}

	public static void main(String[] args) throws Exception {

		Date begin = new Date();
		Configuration conf = HBaseConfiguration.create();
		createTable(conf);

		int exitCode = ToolRunner.run(conf, new HPopulate1(), args);
		Date end = new Date();
		System.out.println(begin);
		System.out.println(end);
		System.exit(exitCode);
	}

	// Create the table, if the table exits already, drop it
	public static void createTable(Configuration conf) throws IOException {
		HBaseAdmin admin = new HBaseAdmin(conf);
		if (admin.tableExists(TABLENAME)) {
			admin.disableTable(TABLENAME);
			admin.deleteTable(TABLENAME);
		}

		HTableDescriptor htd = new HTableDescriptor(TABLENAME);
		HColumnDescriptor hcd = new HColumnDescriptor("info");
		htd.addFamily(hcd);
		admin.createTable(htd);

		HTableDescriptor[] tables = admin.listTables();
		admin.close();
//		if (tables.length != 1
//				&& Bytes.equals(Bytes.toBytes(TABLENAME), tables[0].getName())) {
//			throw new IOException("Failed create of table");
//		}
	}
}
