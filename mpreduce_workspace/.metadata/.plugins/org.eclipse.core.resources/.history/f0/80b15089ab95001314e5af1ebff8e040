package hw3;

import java.io.IOException;
import java.util.StringTokenizer;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.FloatWritable;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.Reducer.Context;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.util.GenericOptionsParser;

import au.com.bytecode.opencsv.CSVParser;

/**
 * Between june 2007 and may 2008 Year 0 Month 2
 * 
 * FlightDate 5 Origin: ORD 11 Dest: JFK 17 DepTime 24 ArrTime 35
 * ArrDelayMinutes 37 Cancelled 41 Diverted 43
 * 
 * @author pengfan
 * 
 */
public class FlightDelayAvg {

	private static final int INDEX_YEAR = 0;
	private static final int INDEX_MONTH = 2;
	private static final int INDEX_FLIGHTDATE = 5;
	private static final int INDEX_ORIGIN = 11;
	private static final int INDEX_DEST = 17;
	private static final int INDEX_DEPTIME = 24;
	private static final int INDEX_ARRTIME = 35;
	private static final int INDEX_ARR_DEALY_MIN = 37;
	private static final int INDEX_CANCELLED = 41;
	private static final int INDEX_DIVERTED = 43;

	private static final int YEAR_MIN = 2007;
	private static final int MONTH_MIN = 6;
	private static final int YEAR_MAX = 2008;
	private static final int MONTH_MAX = 5;
	private static final String ORIG = "ORD";
	private static final String DES = "JFK";
	private static final CSVParser csvParser = new CSVParser();

	public static class FlightMapper extends
			Mapper<Object, Text, FlightRecordKey, FlightRecord> {

		public void map(Object key, Text value, Context context)
				throws IOException, InterruptedException {
			String[] line = csvParser.parseLine(value.toString());
			if (satisifyDate(line[INDEX_YEAR], line[INDEX_MONTH])
					&& satisifyStatus(line[INDEX_CANCELLED],
							line[INDEX_DIVERTED])) {
				String flightType = getFlightType(line[INDEX_ORIGIN],
						line[INDEX_DEST]);
				if (flightType.equals(FlightRecord.FLIGHT_TYPE_L1)) {
					FlightRecordKey k = new FlightRecordKey(line[INDEX_DEST],
							line[INDEX_FLIGHTDATE]);
					FlightRecord v = new FlightRecord(
							line[INDEX_ARR_DEALY_MIN], line[INDEX_ARRTIME],
							flightType);
					context.write(k, v);
				} else if (flightType.equals(FlightRecord.FLIGHT_TYPE_L2)) {
					FlightRecordKey k = new FlightRecordKey(line[INDEX_ORIGIN],
							line[INDEX_FLIGHTDATE]);
					FlightRecord v = new FlightRecord(
							line[INDEX_ARR_DEALY_MIN], line[INDEX_DEPTIME],
							flightType);
					context.write(k, v);
				}
			}
		}

		private String getFlightType(String orig, String dest) {
			if (orig.equals(ORIG) && !dest.equals(DES)) {
				return FlightRecord.FLIGHT_TYPE_L1;
			}
			if (!orig.equals(ORIG) && dest.equals(DES)) {
				return FlightRecord.FLIGHT_TYPE_L2;
			}
			return FlightRecord.FLIGHT_TYPE_UNVALID;
		}

		private boolean satisifyDate(String y, String m) {
			int year = Integer.valueOf(y).intValue();
			int month = Integer.valueOf(m).intValue();
			if (year == YEAR_MIN) {
				return month >= MONTH_MIN;
			} else if (year == YEAR_MAX) {
				return month <= MONTH_MAX;
			} else if (YEAR_MIN < year && year < YEAR_MAX) {
				return true;
			}
			return false;
		}

		private boolean satisifyStatus(String cancelled, String diverted) {
			return cancelled.equals("0") && diverted.equals("0");
		}

	}

	public static class FlightReducer extends
			Reducer<FlightRecordKey, FlightRecord, Text, FloatWritable> {
		private IntWritable result = new IntWritable();

		public void reduce(FlightRecordKey key, Iterable<FlightRecord> values,
				Context context) throws IOException, InterruptedException {

		}
	}

	public static void main(String[] args) throws Exception {
		 Configuration conf = new Configuration();
		 String[] otherArgs = new GenericOptionsParser(conf, args)
		 .getRemainingArgs();
		 if (otherArgs.length != 2) {
		 System.err.println("Usage: wordcount <in> <out>");
		 System.exit(2);
		 }
		 Job job = new Job(conf, "word count");
		 job.setJarByClass(WordCountAddPrefix.class);
		 job.setMapperClass(TokenizerMapper.class);
		 job.setCombinerClass(IntSumReducer.class);
		 job.setReducerClass(IntSumReducer.class);
		 job.setOutputKeyClass(Text.class);
		 job.setOutputValueClass(IntWritable.class);
		 FileInputFormat.addInputPath(job, new Path(otherArgs[0]));
		 FileOutputFormat.setOutputPath(job, new Path(otherArgs[1]));
		 System.exit(job.waitForCompletion(true) ? 0 : 1);
	}
}
