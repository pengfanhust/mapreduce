package preprocess;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.Random;

public class RandomSelectSourceNode {
	private int min;
	private int max;

	public RandomSelectSourceNode(String graphAdjacentListFile) {
		BufferedReader br = null;
		try {

		} catch (IOException e) {
			throw e;
		} finally {
			if (br != null) {
				try {
					br.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
	}

	public void random(int requiredNumber, String outputFile)
			throws IOException {
		Random randomGenerator = new Random();
		HashSet<Integer> result = new HashSet<Integer>();
		while (true) {
			int i = randomGenerator.nextInt(max - min + 1) + min;
			if (!result.contains(i)) {
				result.add(i);
				if (result.size() == requiredNumber)
					break;
			}
		}
		output(result, outputFile);
	}

	private void output(HashSet<Integer> result, String outputFile)
			throws IOException {
		BufferedWriter bw = null;
		try {
			bw = new BufferedWriter(new FileWriter(outputFile));
			for (Integer i : result) {
				bw.write(i.toString());
				bw.newLine();
			}
			bw.flush();
		} catch (IOException e) {
			throw e;

		} finally {
			if (bw != null) {
				try {
					bw.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}

	}

	static public void main(String[] args) {
		try {
			int requiredNum = Integer.parseInt(args[0]);
			RandomSelectSourceNode r = new RandomSelectSourceNode(args[1]);
			r.random(requiredNum, args[2]);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
