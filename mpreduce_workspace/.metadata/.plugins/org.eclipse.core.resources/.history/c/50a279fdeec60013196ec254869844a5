package preprocess;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import sssp.Node;
import ssspcolor.NodeColor;
import util.MpRdcFinalConstants;
import util.StringArrayConvertor;

public class PreprocessGraphSourceNodes {

	// key is the node id, value is the node position in the src nodes file
	private Map<Integer, Integer> srcNodes = new HashMap<Integer, Integer>();

	public void process(String srcNodesFile, String graphFile, String outputFile)
			throws IOException {
		generateSrcNodeMap(srcNodesFile);
		int[] distances = new int[srcNodes.size()];
		for (int i = 0; i < distances.length; i++) {
			distances[i] = Integer.MAX_VALUE;
		}
		int[] colors = new int[srcNodes.size()];
		for (int i = 0; i < colors.length; i++) {
			colors[i] = NodeColor.WHITE;
		}
		BufferedReader br = null;
		BufferedWriter bw = null;
		try {
			br = new BufferedReader(new FileReader(graphFile));
			bw = new BufferedWriter(new FileWriter(outputFile));
			String line = null;
			while ((line = br.readLine()) != null) {
				int id = Integer.parseInt(line
						.split(MpRdcFinalConstants.FIELD_SEPRATOR)[0]);
				bw.write(line);
				bw.write(MpRdcFinalConstants.FIELD_SEPRATOR);
				if (srcNodes.containsKey(id)) {
					// init the node to itself distance to 0;
					distances[srcNodes.get(id)] = 0;
					bw.write(StringArrayConvertor.intArrToString(distances));
					distances[srcNodes.get(id)] = Integer.MAX_VALUE;
				} else {
					bw.write(StringArrayConvertor.intArrToString(distances));
				}
				bw.write(MpRdcFinalConstants.FIELD_SEPRATOR);
				bw.write(StringArrayConvertor.intArrToString(colors));
				bw.newLine();
			}
		} catch (IOException e) {
			throw e;
		} finally {
			if (br != null) {
				try {
					br.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			if (bw != null) {
				try {
					bw.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
	}

	private void generateSrcNodeMap(String srcNodesFile) throws IOException {
		BufferedReader br = null;
		try {
			br = new BufferedReader(new FileReader(srcNodesFile));
			int position = 0;
			String line = null;
			while ((line = br.readLine()) != null) {
				if (line.equals(""))
					continue;
				srcNodes.put(Integer.parseInt(line.trim()), position);
				position++;
			}
		} catch (IOException e) {
			throw e;
		} finally {
			if (br != null) {
				try {
					br.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
	}

	public static void main(String[] args) {
		try {

		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
